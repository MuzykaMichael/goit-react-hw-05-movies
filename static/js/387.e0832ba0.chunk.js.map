{"version":3,"file":"static/js/387.e0832ba0.chunk.js","mappings":"+SAGMA,EACC,mCADDA,EAEQ,+BAFRA,EAGO,sBAHPA,EAIO,gBAJPA,EAKQ,UALRA,EAMQ,WANRA,EAOO,WAIAC,EAAkB,mCAAG,6GAEPC,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,EAAlC,oBAA+DA,IAFxD,cAExBG,EAFwB,yBAGvBA,EAASC,MAHc,gCAM9BC,QAAQC,IAAI,KAAMC,SANY,yDAAH,qDAUlBC,EAAiB,mCAAG,WAAOC,GAAP,gGAENP,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,EAAlC,oBAA+DA,EAA/D,kBAAoFS,IAF9E,cAEvBN,EAFuB,yBAGtBA,EAASC,KAAKM,SAHQ,gCAM7BL,QAAQC,IAAI,KAAMC,SANW,yDAAH,sDAUjBI,EAAiB,mCAAG,WAAOC,GAAP,gGAENV,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,GAAlC,OAAuDY,EAAvD,oBAAqEZ,IAF/D,cAEvBG,EAFuB,yBAGtBA,EAASC,MAHa,gCAM7BC,QAAQC,IAAI,KAAMC,SANW,yDAAH,sDAUjBM,EAAiB,mCAAG,WAAOD,GAAP,gGAENV,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,GAAlC,OAAuDY,GAAvD,OAA4DZ,EAA5D,oBAA0FA,IAFpF,cAEvBG,EAFuB,yBAGtBA,EAASC,MAHa,gCAM7BC,QAAQC,IAAI,KAAMC,SANW,yDAAH,sDAUjBO,EAAiB,mCAAG,WAAOF,GAAP,gGAENV,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,GAAlC,OAAuDY,GAAvD,OAA4DZ,EAA5D,oBAA0FA,IAFpF,cAEvBG,EAFuB,yBAGtBA,EAASC,MAHa,gCAK7BC,QAAQC,IAAR,MAL6B,yDAAH,qD,mECtDjBS,EAAS,WAClB,OACI,qCAEP,C,mJCFYC,E,OAAaC,EAAAA,GAAH,0B,6CCIVC,EAAU,WACvB,OAA2BC,EAAAA,EAAAA,UAAS,IAApC,eAAOC,EAAP,KAAcC,EAAd,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAiCH,EAAAA,EAAAA,WAAS,GAA1C,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAyBN,EAAAA,EAAAA,WAAS,GAAlC,eAAOO,EAAP,KAAaC,EAAb,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACNH,GAAa,GACb,IAAMI,EAAO,mCAAG,8GAEmBf,EAAAA,EAAAA,IAAkBQ,GAFrC,OAEEnB,EAFF,OAGJkB,EAAUlB,EAASO,SAHf,gDAKJiB,EAAS,KAAMpB,SALX,yBAOJkB,GAAa,GAPT,4EAAH,qDAUbI,GACH,GAAC,CAACP,KAIC,gCACKE,IAAW,SAACT,EAAA,EAAD,IACXW,IAAO,0DACR,SAACV,EAAD,UACKI,EAAOU,OAAO,EAAEV,EAAOW,KAAI,YAAwB,IAAtBnB,EAAqB,EAArBA,GAAGoB,EAAkB,EAAlBA,OAAOC,EAAW,EAAXA,QACpC,OACI,2BACI,wBAAKD,KACL,uBAAIC,MAFCrB,EAKhB,KAAE,iEAKd,EAED,G","sources":["api/fetchFromApi.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios'\n\n\nconst apiRefs = {\n  key: '2c6e7be86ec98be9c0020ecf9e4429f5',\n  defaultURL: 'https://api.themoviedb.org/3',\n  trendsURL: '/trending/movie/day',\n  searchURL: '/search/movie',\n  detailsURL: '/movie/',\n  creditsURL: '/credits',\n  reviewsURL:'/reviews'\n}\n\n\nexport const fetchTrendsFromApi = async () =>{\n  try {\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.trendsURL}?api_key=${apiRefs.key}`)\n    return response.data\n  }\n  catch (error) {\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieByQuery = async (query) =>{\n  try {\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.searchURL}?api_key=${apiRefs.key}&query=${query}`)\n    return response.data.results;\n  }\n  catch(error){\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieDetails = async (id) =>{\n  try{\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.detailsURL}${id}?api_key=${apiRefs.key}`)\n    return response.data;\n  }\n  catch(error){\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieCredits = async (id) =>{\n  try{\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.detailsURL}${id}${apiRefs.creditsURL}?api_key=${apiRefs.key}`)\n    return response.data;\n  }\n  catch(error){\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieReviews = async (id) =>{\n  try{\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.detailsURL}${id}${apiRefs.reviewsURL}?api_key=${apiRefs.key}`)\n    return response.data;\n  } catch(error){\n    console.log(error)\n  }\n}","export const Loader = () =>{\n    return(\n        <p>Loading...</p>\n    )\n}","import styled from '@emotion/styled'\n\nexport const ReviewList = styled.ul`\n\n`;\n\n","import { ReviewList } from \"./Reviews.styled\";\nimport { useEffect,useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieReviews } from \"api/fetchFromApi\";\nimport { Loader } from \"components/Loader/Loader\";\n\nexport const Reviews = () =>{\nconst [review,setReview] = useState([]);\nconst {movieId} = useParams();\nconst [isLoading,setIsLoading] = useState(false);\nconst [error,setError] = useState(false);\n\nuseEffect(()=>{\n    setIsLoading(true);\n    const fetcher = async () =>{\n            try{\n                const response = await fetchMovieReviews(movieId);\n                setReview(response.results);\n            } catch(error){\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n    }\n    fetcher();\n},[movieId])\n\n\nreturn(\n    <>\n        {isLoading&&<Loader/>}\n        {error&&<p>Oops, something went wrong...</p>}\n        <ReviewList>\n            {review.length>0?review.map(({id,author,content})=>{\n                return(\n                    <li key={id}>\n                        <h4>{author}</h4>\n                        <p>{content}</p>\n                    </li>\n                )\n            }):<div>Sorry, no reviews on this film.</div>}\n        </ReviewList>\n    </>\n)\n\n}\n\nexport default Reviews;"],"names":["apiRefs","fetchTrendsFromApi","axios","response","data","console","log","message","fetchMovieByQuery","query","results","fetchMovieDetails","id","fetchMovieCredits","fetchMovieReviews","Loader","ReviewList","styled","Reviews","useState","review","setReview","movieId","useParams","isLoading","setIsLoading","error","setError","useEffect","fetcher","length","map","author","content"],"sourceRoot":""}