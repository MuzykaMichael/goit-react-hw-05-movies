{"version":3,"file":"static/js/736.716fdb2d.chunk.js","mappings":"+SAGMA,EACC,mCADDA,EAEQ,+BAFRA,EAGO,sBAHPA,EAIO,gBAJPA,EAKQ,UALRA,EAMQ,WANRA,EAOO,WAIAC,EAAkB,mCAAG,6GAEPC,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,EAAlC,oBAA+DA,IAFxD,cAExBG,EAFwB,yBAGvBA,EAASC,MAHc,gCAM9BC,QAAQC,IAAI,KAAMC,SANY,yDAAH,qDAUlBC,EAAiB,mCAAG,WAAOC,GAAP,gGAENP,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,EAAlC,oBAA+DA,EAA/D,kBAAoFS,IAF9E,cAEvBN,EAFuB,yBAGtBA,EAASC,KAAKM,SAHQ,gCAM7BL,QAAQC,IAAI,KAAMC,SANW,yDAAH,sDAUjBI,EAAiB,mCAAG,WAAOC,GAAP,gGAENV,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,GAAlC,OAAuDY,EAAvD,oBAAqEZ,IAF/D,cAEvBG,EAFuB,yBAGtBA,EAASC,MAHa,gCAM7BC,QAAQC,IAAI,KAAMC,SANW,yDAAH,sDAUjBM,EAAiB,mCAAG,WAAOD,GAAP,gGAENV,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,GAAlC,OAAuDY,GAAvD,OAA4DZ,EAA5D,oBAA0FA,IAFpF,cAEvBG,EAFuB,yBAGtBA,EAASC,MAHa,gCAM7BC,QAAQC,IAAI,KAAMC,SANW,yDAAH,sDAUjBO,EAAiB,mCAAG,WAAOF,GAAP,gGAENV,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAkCA,GAAlC,OAAuDY,GAAvD,OAA4DZ,EAA5D,oBAA0FA,IAFpF,cAEvBG,EAFuB,yBAGtBA,EAASC,MAHa,gCAK7BC,QAAQC,IAAR,MAL6B,yDAAH,qD,2JCpDjBS,EAAWC,EAAAA,EAAAA,GAAH,0BAIRC,EAAeD,EAAAA,EAAAA,GAAH,0B,sDCEZE,EAAO,WACpB,OAAuBC,EAAAA,EAAAA,UAAS,IAAhC,eAAOC,EAAP,KAAYC,EAAZ,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAiCH,EAAAA,EAAAA,WAAS,GAA1C,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAyBN,EAAAA,EAAAA,WAAS,GAAlC,eAAOO,EAAP,KAAaC,EAAb,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACNH,GAAa,GACb,IAAMI,EAAO,mCAAG,8GAEmBhB,EAAAA,EAAAA,IAAkBS,GAFrC,OAEEnB,EAFF,OAGJkB,EAAQlB,EAASiB,MAHb,gDAKJO,EAAS,KAAMpB,SALX,yBAOJkB,GAAa,GAPT,4EAAH,qDAUbI,GACH,GAAC,CAACP,KAIC,gCACCE,IAAW,SAACM,EAAA,EAAD,IACXJ,IAAO,0DACR,SAACX,EAAD,UACSK,EAAKW,OAAS,EAAGX,EAAKY,KAAI,YAAqC,IAAnCpB,EAAkC,EAAlCA,GAAGqB,EAA+B,EAA/BA,UAAUC,EAAqB,EAArBA,KAAKC,EAAgB,EAAhBA,aAC3C,OACI,UAAClB,EAAD,YACI,gBAAKmB,IAAMD,EAAD,yCAA6DA,GAA/CE,EAA+DC,IAAKJ,KAC5F,uBAAIA,KACJ,sCAAcD,OAHCrB,EAM1B,KAAE,uDAKd,EAED,G,mEClDakB,EAAS,WAClB,OACI,qCAEP,C","sources":["api/fetchFromApi.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios'\n\n\nconst apiRefs = {\n  key: '2c6e7be86ec98be9c0020ecf9e4429f5',\n  defaultURL: 'https://api.themoviedb.org/3',\n  trendsURL: '/trending/movie/day',\n  searchURL: '/search/movie',\n  detailsURL: '/movie/',\n  creditsURL: '/credits',\n  reviewsURL:'/reviews'\n}\n\n\nexport const fetchTrendsFromApi = async () =>{\n  try {\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.trendsURL}?api_key=${apiRefs.key}`)\n    return response.data\n  }\n  catch (error) {\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieByQuery = async (query) =>{\n  try {\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.searchURL}?api_key=${apiRefs.key}&query=${query}`)\n    return response.data.results;\n  }\n  catch(error){\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieDetails = async (id) =>{\n  try{\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.detailsURL}${id}?api_key=${apiRefs.key}`)\n    return response.data;\n  }\n  catch(error){\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieCredits = async (id) =>{\n  try{\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.detailsURL}${id}${apiRefs.creditsURL}?api_key=${apiRefs.key}`)\n    return response.data;\n  }\n  catch(error){\n    console.log(error.message)\n  }\n}\n\nexport const fetchMovieReviews = async (id) =>{\n  try{\n    const response = await axios.get(`${apiRefs.defaultURL}${apiRefs.detailsURL}${id}${apiRefs.reviewsURL}?api_key=${apiRefs.key}`)\n    return response.data;\n  } catch(error){\n    console.log(error)\n  }\n}","import styled from '@emotion/styled'\n\nexport const CastList = styled.ul`\n\n`;\n\nexport const CastListItem = styled.li`\n\n`;","import {CastList,\n    CastListItem,} from './Cast.styled'\nimport {useState,useEffect} from 'react'\nimport {fetchMovieCredits} from '../../api/fetchFromApi'\nimport { useParams } from 'react-router-dom'\nimport defaultImage from '../defaultImage.png'\nimport { Loader } from 'components/Loader/Loader'\n\nexport const Cast = () =>{\nconst [cast,setCast] = useState([])\nconst {movieId} = useParams(); \nconst [isLoading,setIsLoading] = useState(false);\nconst [error,setError] = useState(false);\n\nuseEffect(()=>{\n    setIsLoading(true)\n    const fetcher = async ()=>{\n            try{\n                const response = await fetchMovieCredits(movieId);\n                setCast(response.cast)\n            } catch(error) {\n                setError(error.message)\n            } finally {\n                setIsLoading(false)\n            }\n    }\n    fetcher();\n},[movieId])\n\n\nreturn(\n    <>\n    {isLoading&&<Loader/>}\n    {error&&<p>Oops, something went wrong...</p>}\n    <CastList>\n            {cast.length > 0? cast.map(({id,character,name,profile_path})=>{\n                return(\n                    <CastListItem key={id}>\n                        <img src={!profile_path?defaultImage:`https://image.tmdb.org/t/p/w200${profile_path}`} alt={name}/>\n                        <p>{name}</p>\n                        <p>Character:{character}</p>\n                    </CastListItem>\n                )\n            }):<div>We can't find actors.</div>}\n        </CastList>\n    </>\n)\n\n}\n\nexport default Cast;\n","export const Loader = () =>{\n    return(\n        <p>Loading...</p>\n    )\n}"],"names":["apiRefs","fetchTrendsFromApi","axios","response","data","console","log","message","fetchMovieByQuery","query","results","fetchMovieDetails","id","fetchMovieCredits","fetchMovieReviews","CastList","styled","CastListItem","Cast","useState","cast","setCast","movieId","useParams","isLoading","setIsLoading","error","setError","useEffect","fetcher","Loader","length","map","character","name","profile_path","src","defaultImage","alt"],"sourceRoot":""}